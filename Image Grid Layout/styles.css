/* 
    grid - template-rows,template-columns,template-areas,auto-rows,auto-columns,auto-flow
    Grid-area - how many rows or columns to cover or start of off.
        Shorthand for grid-row-start,grid-column-start,grid-row-end,grid-column-end
        e.g grid-area: 2/1/span 2/span 3 --> start on row 2 column 1 and span across 2 rows and 3 columns.
        Can also span across a custom name e.g.
            .item1{
                grid-area:myArea;
            }
            .grid-container{
                display:grid;
                grid-template-areas: 'myArea myArea myArea myArea myArea'
                grid-gap:10px;
            .item1 { grid-area: header; }
            .item2 { grid-area: menu; }
            .item3 { grid-area: main; }
            .item4 { grid-area: right; }
            .item5 { grid-area: footer; }

            .grid-container {
              grid-template-areas:
                'header header header header header header'
                'menu main main main right right'
                    'menu footer footer footer footer footer';
            }
    Grid-auto-columns - property sets a size for the columns in a grid container
        Values: auto, max-content,min-content,minmax(),fit-content(),length,%,initial,inherit
    Grid-auto-flow - controls how auto placed items get inserted in the grid.
        Values: row, column, dense, row dense, column dense
    Grid-auto-rows - sets a size for the rows in a grid container affecting rwos wthout set size
    Grid-column - specify a grid items size and location in a grid layout, and is shorthand for grid-column start and end.
        grid-column: 1 / span 2 start at column and span 2 columns
        grid-column: 1 / 3
    Grid-row - specifies a grid item's size and location in a grid layout.
        Shorthand property for grid-row: row-start, row-end;
    Grid-template: shorhand for grid-template rows,columns,areas
        grid-template: 150px / auto auto auto --> makes 3 columns grid layout where the first row is 150px high
    Grid-template-areas --> specifies areas within the grid layout.
    Grid-template-columns: auto auto auto auto --> make 4 column grid container.
*/
#gridContainer img{
    width:100%;
    height:100%;
    object-fit: cover;
}
#gridContainer{
    margin:0 auto;
    width:650px;
    height:750px;
    text-align: center;
    display:grid;
    grid-template-columns: repeat(3,1fr);
    grid-template-rows: repeat(3,1fr);
    justify-content: center;
    grid-gap:5px;

    /* Grid-area: - start on row1,column1 and end on rownth and columnth */
    /* Grid row: 1 / span 2 --> span from row 1 and span across 2 rows */
    /* Grid-column: 1 / span 2 --> span from column 1 and span across 2 columns */
}
#img-1{
    grid-area: 1 / 1 / 3 / 2;
}
#img-2{
    grid-area:3/1/4/2;
}
#img-3{
    grid-area:1/2/2/3;
}
#img-4{
    grid-area:2/2/4/3
}
#img-5{
    grid-area:1/3/3/4
}
#img-6{
    grid-area:3/3/4/4;
    justify-self: center;
}

@media (max-width: 700px) {
    #gridContainer {
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(3, 1fr);
    }
    #gridContainer img:nth-child(1) {
      grid-area: 1 / 1 / 2 / 2;
    }
    #gridContainer img:nth-child(2) {
      grid-area: 2 / 1 / 3 / 2;
    }
    #gridContainer img:nth-child(3) {
      grid-area: 1 / 2 / 2 / 3;
    }
    #gridContainer img:nth-child(4) {
      grid-area: 2 / 2 / 3 / 3;
    }
    #gridContainer img:nth-child(5) {
      grid-area: 3 / 1 / 4 / 2;
    }
    #gridContainer img:nth-child(6) {
      grid-area: 3 / 2 / 4 / 3;
    }
  }
  
  @media (max-width: 400px) {
    #gridContainer {
      grid-template-columns: 1fr;
      grid-template-rows: repeat(6, 1fr);
    }
    #gridContainer img:nth-child(1) {
      grid-area: 1 / 1 / 2 / 2;
    }
    #gridContainer img:nth-child(2) {
      grid-area: 2 / 1 / 3 / 2;
    }
    #gridContainer img:nth-child(3) {
      grid-area: 3 / 1 / 4 / 2;
    }
    #gridContainer img:nth-child(4) {
      grid-area: 4 / 1 / 5 / 2;
    }
    #gridContainer img:nth-child(5) {
      grid-area: 5 / 1 / 6 / 2;
    }
    #gridContainer img:nth-child(6) {
      grid-area: 6 / 1 / 7 / 2;
    }
  }